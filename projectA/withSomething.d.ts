import React from 'react';
/**
 * Gets the props for a React element type, without preserving the optionality of defaultProps.
 *
 * Inspired by: https://github.com/facebook/flow/blob/b150ae683aa386ae7296d5d6db973454e1fa7ca2/website/en/docs/react/types.md#reactelementpropstypeof-component-
 *
 * Note: Falls back to any for compatibility with JSX components.
 */
declare type ElementProps<C> = C extends React.ComponentType<any> ? C extends {
    new (props: infer P, context?: any): any;
} ? P : C extends (props: infer P & {
    children?: React.ReactNode;
}, context?: any) => any ? P : any : any;
export interface WithSomethingProps {
    something: 'something';
}
export declare function withSomething<C extends React.ComponentType<any>>(InnerComponent: C): {
    new (props: { [P in Exclude<keyof (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>), "something">]: (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>)[P]; } | Readonly<{ [P in Exclude<keyof (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>), "something">]: (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>)[P]; }>): {
        render(): JSX.Element;
        context: any;
        setState<K_1 extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>) => {} | Pick<{}, K_1> | null) | Pick<{}, K_1> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: { [P in Exclude<keyof (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>), "something">]: (C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : T extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C> : C extends {
        propTypes: infer T_1;
        defaultProps: infer D;
    } ? (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : C extends {
        propTypes: infer T_2;
    } ? ElementProps<C> extends any ? (boolean extends (ElementProps<C> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<keyof ElementProps<C>, { [K in keyof ElementProps<C>]: (boolean extends (ElementProps<C>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[keyof ElementProps<C>]>>> & Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : C extends {
        defaultProps: infer D_1;
    } ? ElementProps<C> extends any ? string extends keyof ElementProps<C> ? ElementProps<C> : Pick<ElementProps<C>, Exclude<keyof ElementProps<C>, keyof D_1>> & Partial<Pick<ElementProps<C>, Extract<keyof ElementProps<C>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, keyof ElementProps<C>>>> : never : ElementProps<C>)[P]; }, context: any): {
        render(): JSX.Element;
        context: any;
        setState<K_1 extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>) => {} | Pick<{}, K_1> | null) | Pick<{}, K_1> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{ [P_1 in Exclude<keyof JSX.LibraryManagedAttributes<C, ElementProps<C>>, "something">]: JSX.LibraryManagedAttributes<C, ElementProps<C>>[P_1]; }>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
